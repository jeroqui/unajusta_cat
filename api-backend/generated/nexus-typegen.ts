/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Esport: { // root type
    id?: number | null; // Int
    nom?: string | null; // String
  }
  Mutation: {};
  Persona: { // root type
    active?: boolean | null; // Boolean
    cognoms?: string | null; // String
    email?: string | null; // String
    id?: string | null; // String
    nom?: string | null; // String
    persist?: boolean | null; // Boolean
  }
  Query: {};
  Torneig: { // root type
    descripcio?: string | null; // String
    grupsMaxPersones?: number | null; // Int
    grupsMinPersones?: number | null; // Int
    id?: string | null; // String
    nom?: string | null; // String
  }
  User: { // root type
    id?: number | null; // Int
    username?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Esport: { // field return type
    id: number | null; // Int
    nom: string | null; // String
  }
  Mutation: { // field return type
    loginUser: NexusGenRootTypes['User'] | null; // User
    logoutUser: boolean | null; // Boolean
    registerUser: NexusGenRootTypes['User'] | null; // User
  }
  Persona: { // field return type
    active: boolean | null; // Boolean
    cognoms: string | null; // String
    email: string | null; // String
    id: string | null; // String
    nom: string | null; // String
    persist: boolean | null; // Boolean
  }
  Query: { // field return type
    esports: NexusGenRootTypes['Esport'][] | null; // [Esport!]
    loggedUser: NexusGenRootTypes['User'] | null; // User
    persona: NexusGenRootTypes['Persona'] | null; // Persona
    user: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][] | null; // [User!]
  }
  Torneig: { // field return type
    descripcio: string | null; // String
    grupsMaxPersones: number | null; // Int
    grupsMinPersones: number | null; // Int
    id: string | null; // String
    nom: string | null; // String
  }
  User: { // field return type
    id: number | null; // Int
    persona: NexusGenRootTypes['Persona'] | null; // Persona
    username: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Esport: { // field return type name
    id: 'Int'
    nom: 'String'
  }
  Mutation: { // field return type name
    loginUser: 'User'
    logoutUser: 'Boolean'
    registerUser: 'User'
  }
  Persona: { // field return type name
    active: 'Boolean'
    cognoms: 'String'
    email: 'String'
    id: 'String'
    nom: 'String'
    persist: 'Boolean'
  }
  Query: { // field return type name
    esports: 'Esport'
    loggedUser: 'User'
    persona: 'Persona'
    user: 'User'
    users: 'User'
  }
  Torneig: { // field return type name
    descripcio: 'String'
    grupsMaxPersones: 'Int'
    grupsMinPersones: 'Int'
    id: 'String'
    nom: 'String'
  }
  User: { // field return type name
    id: 'Int'
    persona: 'Persona'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    loginUser: { // args
      password: string; // String!
      username: string; // String!
    }
    registerUser: { // args
      cognoms?: string | null; // String
      email: string; // String!
      nom: string; // String!
      password: string; // String!
      username: string; // String!
    }
  }
  Query: {
    persona: { // args
      email?: string | null; // String
      id?: string | null; // String
    }
    user: { // args
      userId?: number | null; // Int
      username?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}